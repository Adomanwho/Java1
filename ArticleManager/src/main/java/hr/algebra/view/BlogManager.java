/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.view;

import hr.algebra.LoginFrame;
import hr.algebra.model.AuthorTransferable;
import hr.algebra.model.Author;
import hr.algebra.model.AuthorAddable;
import hr.algebra.model.Blog;
import hr.algebra.model.BlogArchive;
import hr.algebra.model.BlogType;
import hr.algebra.utilities.FrameUtils;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;

/**
 *
 * @author dnlbe
 */
public class BlogManager extends javax.swing.JFrame implements AuthorAddable{

    private static final String FILENAME = "src/main/resources/blogarchive.xml";

    private List<JTextField> validationFields;
    private List<JLabel> errorLabels;

    private final Set<Author> allAuthors = new TreeSet<>();
    private final Set<Author> authors = new TreeSet<>();
    private final List<Blog> blogs = new ArrayList<>();

    private final DefaultListModel<Author> allAuthorsModel = new DefaultListModel<>();
    private final DefaultListModel<Author> authorsModel = new DefaultListModel<>();
    private final DefaultListModel<Blog> blogsModel = new DefaultListModel<>();

    /**
     * Creates new form BlogManager
     */
    public BlogManager() {
        initComponents();
        init();
        loadBlogsAndAuthors();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsAuthors = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfPublishedDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        lbTitleError = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsAllAuthors = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsBlogs = new javax.swing.JList<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnSaveBlogs = new javax.swing.JButton();
        btnAddAuthor = new javax.swing.JButton();
        btnAddBlog = new javax.swing.JButton();
        btnRefreshBlogs = new javax.swing.JButton();
        cbBlogTypes = new javax.swing.JComboBox<>();
        lbPublishedDateError = new javax.swing.JLabel();
        lbAuthorsError = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mniLogout = new javax.swing.JMenuItem();
        mniExitApp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Blogs");

        jScrollPane1.setViewportView(lsAuthors);

        jLabel2.setText("Title");

        jLabel3.setText("Type");

        jLabel4.setText("Published date (yyyy-MM-dd)");

        tfPublishedDate.setName("Date"); // NOI18N

        jLabel5.setText("Blogs");

        lbTitleError.setForeground(new java.awt.Color(255, 0, 0));
        lbTitleError.setText("X");

        jScrollPane2.setViewportView(lsAllAuthors);

        jScrollPane3.setViewportView(lsBlogs);

        jLabel10.setText("Authors");

        jLabel11.setText("All Authors");

        btnSaveBlogs.setText("Save Blogs");
        btnSaveBlogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveBlogsActionPerformed(evt);
            }
        });

        btnAddAuthor.setText("Add Author");
        btnAddAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAuthorActionPerformed(evt);
            }
        });

        btnAddBlog.setText("Add Blog");
        btnAddBlog.setToolTipText("");
        btnAddBlog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBlogActionPerformed(evt);
            }
        });

        btnRefreshBlogs.setText("Refresh Blogs");
        btnRefreshBlogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshBlogsActionPerformed(evt);
            }
        });

        lbPublishedDateError.setForeground(new java.awt.Color(255, 0, 0));
        lbPublishedDateError.setText("X");

        lbAuthorsError.setForeground(new java.awt.Color(255, 0, 0));
        lbAuthorsError.setText("X");

        jMenu1.setText("App options");

        mniLogout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniLogout.setText("Logout");
        mniLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLogoutActionPerformed(evt);
            }
        });
        jMenu1.add(mniLogout);

        mniExitApp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniExitApp.setText("Exit app");
        mniExitApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExitAppActionPerformed(evt);
            }
        });
        jMenu1.add(mniExitApp);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSaveBlogs, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4)
                                            .addComponent(tfPublishedDate)
                                            .addComponent(cbBlogTypes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lbPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10)))
                            .addComponent(btnAddBlog, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRefreshBlogs, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbAuthorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAddAuthor, jScrollPane2});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel3)
                                            .addGap(9, 9, 9)
                                            .addComponent(cbBlogTypes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel4)
                                            .addGap(8, 8, 8)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(lbPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                    .addComponent(lbAuthorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(btnAddBlog, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnRefreshBlogs, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 11, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSaveBlogs, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAuthorActionPerformed
        new AuthorDialog(this, false).setVisible(true);
    }//GEN-LAST:event_btnAddAuthorActionPerformed

    private void btnAddBlogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBlogActionPerformed
        if (formValid()) {
            Blog blog = new Blog(
                    new TreeSet<>(authors),
                    tfTitle.getText().trim(),
                    (BlogType) cbBlogTypes.getSelectedItem(),
                    LocalDate.parse(tfPublishedDate.getText().trim(), Blog.DATE_FORMATTER));
            blogs.add(blog);
            loadBlogsModel();
            clearForm();
        }
    }//GEN-LAST:event_btnAddBlogActionPerformed

    private void btnRefreshBlogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshBlogsActionPerformed
        loadBlogsAndAuthors();
    }//GEN-LAST:event_btnRefreshBlogsActionPerformed

    private void btnSaveBlogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveBlogsActionPerformed
        try {
            JAXBUtils.save(new BlogArchive(blogs), FILENAME);
            MessageUtils.showInformationMessage("Info", "Blogs saved");
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to save blogs");
            Logger.getLogger(BlogManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveBlogsActionPerformed

    private void mniLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLogoutActionPerformed
        try {
            FrameUtils.openFrame(new LoginFrame(), this);
        } catch (Exception ex) {
            Logger.getLogger(BlogManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mniLogoutActionPerformed

    private void mniExitAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExitAppActionPerformed
        dispose();
    }//GEN-LAST:event_mniExitAppActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BlogManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BlogManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BlogManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlogManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BlogManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAuthor;
    private javax.swing.JButton btnAddBlog;
    private javax.swing.JButton btnRefreshBlogs;
    private javax.swing.JButton btnSaveBlogs;
    private javax.swing.JComboBox<BlogType> cbBlogTypes;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbAuthorsError;
    private javax.swing.JLabel lbPublishedDateError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JList<Author> lsAllAuthors;
    private javax.swing.JList<Author> lsAuthors;
    private javax.swing.JList<Blog> lsBlogs;
    private javax.swing.JMenuItem mniExitApp;
    private javax.swing.JMenuItem mniLogout;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        initValidation();
        hideErrors();
        loadBlogTypesModel();
        initDragNDrop();
    }

    private void initValidation() {
        validationFields = Arrays.asList(tfTitle, tfPublishedDate);
        errorLabels = Arrays.asList(lbTitleError, lbPublishedDateError);
    }

    private void hideErrors() {
        errorLabels.forEach(e -> e.setVisible(false));
        lbAuthorsError.setVisible(false);
    }
    private void loadBlogTypesModel() {
        cbBlogTypes.setModel(new DefaultComboBoxModel<>(BlogType.values()));
    }

    private void loadAllAuthorsModel() {
        allAuthorsModel.clear();
        allAuthors.forEach(allAuthorsModel::addElement);
        lsAllAuthors.setModel(allAuthorsModel);
    }

    private void loadAuthorsModel() {
        authorsModel.clear();
        authors.forEach(authorsModel::addElement);
        lsAuthors.setModel(authorsModel);
    }

    private void loadBlogsModel() {
        blogsModel.clear();
        blogs.forEach(blogsModel::addElement);
        lsBlogs.setModel(blogsModel);
    }

    private void initDragNDrop() {
        lsAllAuthors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllAuthors.setDragEnabled(true);
        lsAllAuthors.setTransferHandler(new ExportTransferHandler());

        lsAuthors.setDropMode(DropMode.ON);
        lsAuthors.setTransferHandler(new ImportTransferHandler());
    }

    private void loadBlogsAndAuthors() {
        try {
            BlogArchive blogArchive = (BlogArchive) JAXBUtils.load(BlogArchive.class, FILENAME);
            blogs.clear();
            blogs.addAll(blogArchive.getBlogs());
            allAuthors.clear();
            blogs.forEach(blog -> allAuthors.addAll(blog.getAuthors()));
            loadBlogsModel();
            loadAllAuthorsModel();

        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to load blogs");
            Logger.getLogger(BlogManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private class ExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new AuthorTransferable(lsAllAuthors.getSelectedValue());
        }
    }

    private class ImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(AuthorTransferable.AUTHOR_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Author add = (Author) transferable.getTransferData(AuthorTransferable.AUTHOR_FLAVOR);
                if (authors.add(add)) {
                    loadAuthorsModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(BlogManager.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    private boolean formValid() {
        hideErrors();
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setVisible(validationFields.get(i).getText().trim().isEmpty());

            if ("Date".equals(validationFields.get(i).getName())) {
                try {
                    LocalDate.parse(validationFields.get(i).getText().trim(), Blog.DATE_FORMATTER);
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setVisible(true);
                }
            }
        }
        if (lsAuthors.getModel().getSize() == 0) {
            lbAuthorsError.setVisible(true);
            ok = false;
        }

        return ok;
    }

    private void clearForm() {
        hideErrors();
        validationFields.forEach(e -> e.setText(""));
        authorsModel.clear();
        authors.clear();
        cbBlogTypes.setSelectedIndex(0);
        lsAllAuthors.clearSelection();
    }

    @Override
    public boolean addAuthor(Author author) {
        if (allAuthors.add(author)) {
            loadAllAuthorsModel();
            return true;
        }
        return false;
    }

}
